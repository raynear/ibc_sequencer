// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibcsequencer/sequencer/packet.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SequencerPacketData struct {
	// Types that are valid to be assigned to Packet:
	//	*SequencerPacketData_NoData
	//	*SequencerPacketData_CommitmentPacket
	//	*SequencerPacketData_PayloadPacket
	//	*SequencerPacketData_TlpPacket
	Packet isSequencerPacketData_Packet `protobuf_oneof:"packet"`
}

func (m *SequencerPacketData) Reset()         { *m = SequencerPacketData{} }
func (m *SequencerPacketData) String() string { return proto.CompactTextString(m) }
func (*SequencerPacketData) ProtoMessage()    {}
func (*SequencerPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d01f0d2e455e60e4, []int{0}
}
func (m *SequencerPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SequencerPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SequencerPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SequencerPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SequencerPacketData.Merge(m, src)
}
func (m *SequencerPacketData) XXX_Size() int {
	return m.Size()
}
func (m *SequencerPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_SequencerPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_SequencerPacketData proto.InternalMessageInfo

type isSequencerPacketData_Packet interface {
	isSequencerPacketData_Packet()
	MarshalTo([]byte) (int, error)
	Size() int
}

type SequencerPacketData_NoData struct {
	NoData *NoData `protobuf:"bytes,1,opt,name=noData,proto3,oneof" json:"noData,omitempty"`
}
type SequencerPacketData_CommitmentPacket struct {
	CommitmentPacket *CommitmentPacketData `protobuf:"bytes,2,opt,name=commitmentPacket,proto3,oneof" json:"commitmentPacket,omitempty"`
}
type SequencerPacketData_PayloadPacket struct {
	PayloadPacket *PayloadPacketData `protobuf:"bytes,3,opt,name=payloadPacket,proto3,oneof" json:"payloadPacket,omitempty"`
}
type SequencerPacketData_TlpPacket struct {
	TlpPacket *TlpPacketData `protobuf:"bytes,4,opt,name=tlpPacket,proto3,oneof" json:"tlpPacket,omitempty"`
}

func (*SequencerPacketData_NoData) isSequencerPacketData_Packet()           {}
func (*SequencerPacketData_CommitmentPacket) isSequencerPacketData_Packet() {}
func (*SequencerPacketData_PayloadPacket) isSequencerPacketData_Packet()    {}
func (*SequencerPacketData_TlpPacket) isSequencerPacketData_Packet()        {}

func (m *SequencerPacketData) GetPacket() isSequencerPacketData_Packet {
	if m != nil {
		return m.Packet
	}
	return nil
}

func (m *SequencerPacketData) GetNoData() *NoData {
	if x, ok := m.GetPacket().(*SequencerPacketData_NoData); ok {
		return x.NoData
	}
	return nil
}

func (m *SequencerPacketData) GetCommitmentPacket() *CommitmentPacketData {
	if x, ok := m.GetPacket().(*SequencerPacketData_CommitmentPacket); ok {
		return x.CommitmentPacket
	}
	return nil
}

func (m *SequencerPacketData) GetPayloadPacket() *PayloadPacketData {
	if x, ok := m.GetPacket().(*SequencerPacketData_PayloadPacket); ok {
		return x.PayloadPacket
	}
	return nil
}

func (m *SequencerPacketData) GetTlpPacket() *TlpPacketData {
	if x, ok := m.GetPacket().(*SequencerPacketData_TlpPacket); ok {
		return x.TlpPacket
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SequencerPacketData) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SequencerPacketData_NoData)(nil),
		(*SequencerPacketData_CommitmentPacket)(nil),
		(*SequencerPacketData_PayloadPacket)(nil),
		(*SequencerPacketData_TlpPacket)(nil),
	}
}

type NoData struct {
}

func (m *NoData) Reset()         { *m = NoData{} }
func (m *NoData) String() string { return proto.CompactTextString(m) }
func (*NoData) ProtoMessage()    {}
func (*NoData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d01f0d2e455e60e4, []int{1}
}
func (m *NoData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoData.Merge(m, src)
}
func (m *NoData) XXX_Size() int {
	return m.Size()
}
func (m *NoData) XXX_DiscardUnknown() {
	xxx_messageInfo_NoData.DiscardUnknown(m)
}

var xxx_messageInfo_NoData proto.InternalMessageInfo

// CommitmentPacketData defines a struct for the packet payload
type CommitmentPacketData struct {
	Round uint64 `protobuf:"varint,1,opt,name=round,proto3" json:"round,omitempty"`
	Hash  string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *CommitmentPacketData) Reset()         { *m = CommitmentPacketData{} }
func (m *CommitmentPacketData) String() string { return proto.CompactTextString(m) }
func (*CommitmentPacketData) ProtoMessage()    {}
func (*CommitmentPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d01f0d2e455e60e4, []int{2}
}
func (m *CommitmentPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommitmentPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommitmentPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommitmentPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitmentPacketData.Merge(m, src)
}
func (m *CommitmentPacketData) XXX_Size() int {
	return m.Size()
}
func (m *CommitmentPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitmentPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_CommitmentPacketData proto.InternalMessageInfo

func (m *CommitmentPacketData) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *CommitmentPacketData) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

// CommitmentPacketAck defines a struct for the packet acknowledgment
type CommitmentPacketAck struct {
}

func (m *CommitmentPacketAck) Reset()         { *m = CommitmentPacketAck{} }
func (m *CommitmentPacketAck) String() string { return proto.CompactTextString(m) }
func (*CommitmentPacketAck) ProtoMessage()    {}
func (*CommitmentPacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_d01f0d2e455e60e4, []int{3}
}
func (m *CommitmentPacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommitmentPacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommitmentPacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommitmentPacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitmentPacketAck.Merge(m, src)
}
func (m *CommitmentPacketAck) XXX_Size() int {
	return m.Size()
}
func (m *CommitmentPacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitmentPacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_CommitmentPacketAck proto.InternalMessageInfo

// PayloadPacketData defines a struct for the packet payload
type PayloadPacketData struct {
	Round        uint64   `protobuf:"varint,1,opt,name=round,proto3" json:"round,omitempty"`
	Hash         string   `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	EncryptedTxs []string `protobuf:"bytes,3,rep,name=encryptedTxs,proto3" json:"encryptedTxs,omitempty"`
}

func (m *PayloadPacketData) Reset()         { *m = PayloadPacketData{} }
func (m *PayloadPacketData) String() string { return proto.CompactTextString(m) }
func (*PayloadPacketData) ProtoMessage()    {}
func (*PayloadPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d01f0d2e455e60e4, []int{4}
}
func (m *PayloadPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayloadPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayloadPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PayloadPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayloadPacketData.Merge(m, src)
}
func (m *PayloadPacketData) XXX_Size() int {
	return m.Size()
}
func (m *PayloadPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_PayloadPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_PayloadPacketData proto.InternalMessageInfo

func (m *PayloadPacketData) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *PayloadPacketData) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *PayloadPacketData) GetEncryptedTxs() []string {
	if m != nil {
		return m.EncryptedTxs
	}
	return nil
}

// PayloadPacketAck defines a struct for the packet acknowledgment
type PayloadPacketAck struct {
}

func (m *PayloadPacketAck) Reset()         { *m = PayloadPacketAck{} }
func (m *PayloadPacketAck) String() string { return proto.CompactTextString(m) }
func (*PayloadPacketAck) ProtoMessage()    {}
func (*PayloadPacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_d01f0d2e455e60e4, []int{5}
}
func (m *PayloadPacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayloadPacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayloadPacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PayloadPacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayloadPacketAck.Merge(m, src)
}
func (m *PayloadPacketAck) XXX_Size() int {
	return m.Size()
}
func (m *PayloadPacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_PayloadPacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_PayloadPacketAck proto.InternalMessageInfo

// TlpPacketData defines a struct for the packet payload
type TlpPacketData struct {
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Tlp  string `protobuf:"bytes,2,opt,name=tlp,proto3" json:"tlp,omitempty"`
}

func (m *TlpPacketData) Reset()         { *m = TlpPacketData{} }
func (m *TlpPacketData) String() string { return proto.CompactTextString(m) }
func (*TlpPacketData) ProtoMessage()    {}
func (*TlpPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d01f0d2e455e60e4, []int{6}
}
func (m *TlpPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TlpPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TlpPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TlpPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TlpPacketData.Merge(m, src)
}
func (m *TlpPacketData) XXX_Size() int {
	return m.Size()
}
func (m *TlpPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_TlpPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_TlpPacketData proto.InternalMessageInfo

func (m *TlpPacketData) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *TlpPacketData) GetTlp() string {
	if m != nil {
		return m.Tlp
	}
	return ""
}

// TlpPacketAck defines a struct for the packet acknowledgment
type TlpPacketAck struct {
}

func (m *TlpPacketAck) Reset()         { *m = TlpPacketAck{} }
func (m *TlpPacketAck) String() string { return proto.CompactTextString(m) }
func (*TlpPacketAck) ProtoMessage()    {}
func (*TlpPacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_d01f0d2e455e60e4, []int{7}
}
func (m *TlpPacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TlpPacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TlpPacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TlpPacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TlpPacketAck.Merge(m, src)
}
func (m *TlpPacketAck) XXX_Size() int {
	return m.Size()
}
func (m *TlpPacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_TlpPacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_TlpPacketAck proto.InternalMessageInfo

func init() {
	proto.RegisterType((*SequencerPacketData)(nil), "ibc_sequencer.sequencer.SequencerPacketData")
	proto.RegisterType((*NoData)(nil), "ibc_sequencer.sequencer.NoData")
	proto.RegisterType((*CommitmentPacketData)(nil), "ibc_sequencer.sequencer.CommitmentPacketData")
	proto.RegisterType((*CommitmentPacketAck)(nil), "ibc_sequencer.sequencer.CommitmentPacketAck")
	proto.RegisterType((*PayloadPacketData)(nil), "ibc_sequencer.sequencer.PayloadPacketData")
	proto.RegisterType((*PayloadPacketAck)(nil), "ibc_sequencer.sequencer.PayloadPacketAck")
	proto.RegisterType((*TlpPacketData)(nil), "ibc_sequencer.sequencer.TlpPacketData")
	proto.RegisterType((*TlpPacketAck)(nil), "ibc_sequencer.sequencer.TlpPacketAck")
}

func init() {
	proto.RegisterFile("ibcsequencer/sequencer/packet.proto", fileDescriptor_d01f0d2e455e60e4)
}

var fileDescriptor_d01f0d2e455e60e4 = []byte{
	// 358 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0xd2, 0x41, 0x4b, 0x02, 0x41,
	0x14, 0x07, 0xf0, 0x5d, 0xd7, 0x16, 0x7d, 0x69, 0xd8, 0x68, 0xe4, 0x69, 0x95, 0x09, 0x42, 0x82,
	0x56, 0x28, 0x3a, 0x78, 0x4b, 0x8b, 0xe8, 0x14, 0xb2, 0x79, 0xaa, 0x43, 0x8c, 0xe3, 0x80, 0xa2,
	0xee, 0x4e, 0xbb, 0x23, 0xe8, 0xb7, 0xe8, 0x63, 0x75, 0x14, 0xba, 0x74, 0x0c, 0xfd, 0x22, 0xe1,
	0xec, 0xb8, 0xba, 0xda, 0x42, 0xb7, 0x37, 0xbb, 0xef, 0xfd, 0x1e, 0xf3, 0x67, 0xe0, 0x6c, 0xd0,
	0xa5, 0x01, 0x7b, 0x9f, 0x30, 0x97, 0x32, 0xbf, 0xbe, 0xa9, 0x38, 0xa1, 0x43, 0x26, 0x6c, 0xee,
	0x7b, 0xc2, 0x43, 0xa7, 0x83, 0x2e, 0x7d, 0x8b, 0xfe, 0xd9, 0x51, 0x85, 0xbf, 0x52, 0x50, 0x7c,
	0x5e, 0x9f, 0xda, 0x72, 0xe4, 0x9e, 0x08, 0x82, 0x1a, 0x60, 0xba, 0xde, 0xaa, 0x2a, 0xeb, 0x55,
	0xbd, 0x76, 0x78, 0x55, 0xb1, 0x13, 0x04, 0xfb, 0x49, 0xb6, 0x3d, 0x6a, 0x8e, 0x1a, 0x40, 0xaf,
	0x50, 0xa0, 0xde, 0x78, 0x3c, 0x10, 0x63, 0xe6, 0x8a, 0x90, 0x2c, 0xa7, 0x24, 0x72, 0x99, 0x88,
	0xdc, 0xed, 0x0c, 0x28, 0x72, 0x0f, 0x42, 0x0e, 0xe4, 0x39, 0x99, 0x8d, 0x3c, 0xd2, 0x53, 0xb2,
	0x21, 0xe5, 0x8b, 0x44, 0xb9, 0xbd, 0xdd, 0xad, 0xd8, 0x38, 0x81, 0x1e, 0x20, 0x2b, 0x46, 0x5c,
	0x79, 0x69, 0xe9, 0x9d, 0x27, 0x7a, 0x9d, 0x75, 0xa7, 0xb2, 0x36, 0xa3, 0xad, 0x0c, 0x98, 0x61,
	0xe8, 0x38, 0x03, 0x66, 0x18, 0x0b, 0xbe, 0x85, 0xd2, 0x5f, 0x77, 0x43, 0x25, 0x38, 0xf0, 0xbd,
	0x89, 0xdb, 0x93, 0xf1, 0xa6, 0x9d, 0xf0, 0x80, 0x10, 0xa4, 0xfb, 0x24, 0xe8, 0xcb, 0xb8, 0xb2,
	0x8e, 0xac, 0xf1, 0x09, 0x14, 0x77, 0x85, 0x26, 0x1d, 0x62, 0x02, 0xc7, 0x7b, 0x57, 0xfb, 0xbf,
	0x8a, 0x30, 0xe4, 0x98, 0x4b, 0xfd, 0x19, 0x17, 0xac, 0xd7, 0x99, 0x06, 0x65, 0xa3, 0x6a, 0xd4,
	0xb2, 0x4e, 0xec, 0x1b, 0x46, 0x50, 0x88, 0xad, 0x58, 0xad, 0xbd, 0x81, 0x7c, 0x2c, 0x81, 0x08,
	0xd7, 0xb7, 0xf0, 0x02, 0x18, 0x62, 0xc4, 0xd5, 0xbe, 0x55, 0x89, 0x8f, 0x20, 0x17, 0x8d, 0x35,
	0xe9, 0xb0, 0xd5, 0xf8, 0x5c, 0x58, 0xfa, 0x7c, 0x61, 0xe9, 0x3f, 0x0b, 0x4b, 0xff, 0x58, 0x5a,
	0xda, 0x7c, 0x69, 0x69, 0xdf, 0x4b, 0x4b, 0x7b, 0xa9, 0xc4, 0x82, 0xaf, 0x4f, 0xb7, 0x5e, 0xb4,
	0x98, 0x71, 0x16, 0x74, 0x4d, 0xf9, 0xa2, 0xaf, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xb0, 0x10,
	0xf3, 0xaf, 0xf8, 0x02, 0x00, 0x00,
}

func (m *SequencerPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SequencerPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SequencerPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Packet != nil {
		{
			size := m.Packet.Size()
			i -= size
			if _, err := m.Packet.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *SequencerPacketData_NoData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SequencerPacketData_NoData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoData != nil {
		{
			size, err := m.NoData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *SequencerPacketData_CommitmentPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SequencerPacketData_CommitmentPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CommitmentPacket != nil {
		{
			size, err := m.CommitmentPacket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *SequencerPacketData_PayloadPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SequencerPacketData_PayloadPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PayloadPacket != nil {
		{
			size, err := m.PayloadPacket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *SequencerPacketData_TlpPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SequencerPacketData_TlpPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TlpPacket != nil {
		{
			size, err := m.TlpPacket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *NoData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CommitmentPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommitmentPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommitmentPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	if m.Round != 0 {
		i = encodeVarintPacket(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CommitmentPacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommitmentPacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommitmentPacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PayloadPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayloadPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PayloadPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EncryptedTxs) > 0 {
		for iNdEx := len(m.EncryptedTxs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EncryptedTxs[iNdEx])
			copy(dAtA[i:], m.EncryptedTxs[iNdEx])
			i = encodeVarintPacket(dAtA, i, uint64(len(m.EncryptedTxs[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	if m.Round != 0 {
		i = encodeVarintPacket(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PayloadPacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayloadPacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PayloadPacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TlpPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TlpPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TlpPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tlp) > 0 {
		i -= len(m.Tlp)
		copy(dAtA[i:], m.Tlp)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Tlp)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TlpPacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TlpPacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TlpPacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintPacket(dAtA []byte, offset int, v uint64) int {
	offset -= sovPacket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SequencerPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Packet != nil {
		n += m.Packet.Size()
	}
	return n
}

func (m *SequencerPacketData_NoData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoData != nil {
		l = m.NoData.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *SequencerPacketData_CommitmentPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommitmentPacket != nil {
		l = m.CommitmentPacket.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *SequencerPacketData_PayloadPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PayloadPacket != nil {
		l = m.PayloadPacket.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *SequencerPacketData_TlpPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TlpPacket != nil {
		l = m.TlpPacket.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *NoData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CommitmentPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Round != 0 {
		n += 1 + sovPacket(uint64(m.Round))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *CommitmentPacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PayloadPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Round != 0 {
		n += 1 + sovPacket(uint64(m.Round))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	if len(m.EncryptedTxs) > 0 {
		for _, s := range m.EncryptedTxs {
			l = len(s)
			n += 1 + l + sovPacket(uint64(l))
		}
	}
	return n
}

func (m *PayloadPacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TlpPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Tlp)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *TlpPacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovPacket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPacket(x uint64) (n int) {
	return sovPacket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SequencerPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SequencerPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SequencerPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NoData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &SequencerPacketData_NoData{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitmentPacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CommitmentPacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &SequencerPacketData_CommitmentPacket{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayloadPacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PayloadPacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &SequencerPacketData_PayloadPacket{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlpPacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TlpPacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &SequencerPacketData_TlpPacket{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommitmentPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommitmentPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommitmentPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommitmentPacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommitmentPacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommitmentPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayloadPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayloadPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayloadPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedTxs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedTxs = append(m.EncryptedTxs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayloadPacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayloadPacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayloadPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TlpPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TlpPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TlpPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tlp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tlp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TlpPacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TlpPacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TlpPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPacket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPacket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPacket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPacket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPacket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPacket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPacket = fmt.Errorf("proto: unexpected end of group")
)
